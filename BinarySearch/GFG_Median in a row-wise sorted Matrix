
class Solution:
             
    def upperBound(self,arr, x, n):
        low = 0
        high = n - 1
        ans = n
    
        while low <= high:
            mid = (low + high) // 2
            # maybe an answer
            if arr[mid] > x:
                ans = mid
                # look for a smaller index on the left
                high = mid - 1
            else:
                low = mid + 1  # look on the right
    
        return ans
    
    def countSmallEqual(self,matrix, m, n, x):
        cnt = 0
        for i in range(m):
            cnt += self.upperBound(matrix[i], x, n)
        return cnt
    
    def median(self,matrix, m, n):
        low = float('inf')
        high = float('-inf')
    
        # point low and high to the right elements
        for i in range(m):
            low = min(low, matrix[i][0])
            high = max(high, matrix[i][n - 1])
    
        req = (n * m) // 2
        while low <= high:
            mid = (low + high) // 2
            smallEqual = self.countSmallEqual(matrix, m, n, mid)
            if smallEqual <= req:
                low = mid + 1
            else:
                high = mid - 1
    
        return low